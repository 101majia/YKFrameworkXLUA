---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/6/15 15:43
---
local util = require("xlua.util")
local fgui = require("FGUI.FairyGUI")

local this={}
this.YKSupportLua = CS.YKSupportLua
this.LuaSceneBase = CS.YKSupportLua.LuaSceneBase
this.LuaWindow = CS.YKSupportLua.LuaWindow
this.LuaStateBase = CS.YKSupportLua.LuaStateBase
this.LuaTaskBase = CS.YKSupportLua.LuaTaskBase
this.LuaUBBParser = CS.YKSupportLua.LuaUBBParser
this.EventDispatcherNode = CS.EventDispatcherNode
this.EventListenerDele = CS.EventDispatcherNode.EventListenerDele
this.EventDef = CS.EventDef
this.TweenUtils = CS.TweenUtils
this.EventData = CS.EventData
this.EventDataLua = CS.EventDataLua
this.UIMgr = CS.UIMgr
this.UIMgr = CS.SceneBase
this.BaseUI = CS.BaseUI
this.ResMgr = CS.ResMgr
this.ABMgr = CS.ABMgr
this.Net = CS.Net
this.GameServerMsg = CS.GameServerMsg
this.ServerResponseEvent = CS.ServerResponseEvent
this.ServerErrorEvent = CS.ServerErrorEvent
this.LoadGroupProgress = CS.LoadGroupProgress
this.GroupProgress = CS.GroupProgress
this.ResGroupLoadError = CS.ResGroupLoadError
this.ResGroupLoadError = CS.ResLoadGroupEvent
this.ResGroupLoadError = CS.GamUtil
this.GameObject = CS.UnityEngine.GameObject
this.Transform = CS.UnityEngine.Transform;
this.GameMode = CS.GameMode;
this.AsynTask = CS.AsynTask;
this.SceneLoadTask = CS.SceneLoadTask;
this.SceneMgr = CS.SceneMgr;
this.UnitySceneMgr = CS.UnityEngine.SceneManagement.SceneManager;
this.ComUtil = CS.CS.ComUtil;
this.Application = CS.UnityEngine.Application
this.RuntimePlatform = CS.UnityEngine.RuntimePlatform
this.Vector3 = CS.UnityEngine.Vector3;
this.GameFlag = CS.GameFlag;
this.Color = CS.Color
this.SoundMgr = CS.SoundMgr;

this.BGMMgr = CS.BGMMgr;
this.GetGpsTask = CS.GetGpsTask;
this.Input = CS.UnityEngine.Input;
this.Initialization = CS.Initialization;
this.LuaMgr = CS.LuaMgr;
this.PlayerPrefs = CS.UnityEngine.PlayerPrefs;
this.AnimaCallLua = CS.AnimaCallLua;
this.RawImage = CS.RawImage;
this.Ray = CS.Ray;
this.RaycastHit = CS.RaycastHit;
this.Screen = CS.UnityEngine.Screen
this.Physics = CS.UnityEngine.Physics
this.MeshFilter = CS.UnityEngine.MeshFilter
this.Mesh = CS.UnityEngine.Mesh
this.Animator = CS.UnityEngine.Animator
this.AppConst = CS.AppConst
this.PokerMeshAnimo = CS.PokerMeshAnimo
this.LayerMask = CS.LayerMask
this.Log = CS.Debugger
this.SystemInfo = CS.UnityEngine.SystemInfo
this.Material = CS.UnityEngine.Material
this.Texture2D = CS.UnityEngine.Texture2D
this.ListLoadABTask = CS.System.Collections.Generic.List_LoadABTask
this.LoadABTask = CS.LoadABTask
this.ComparisonFileInfoList = CS.ComparisonFileInfoList
this.DecompressionAsynTask = CS.DecompressionAsynTask
this.ParallelTask = CS.ParallelTask
this.TaskBase = CS.TaskBase
this.ListTaskBase = CS.System.Collections.Generic.List_TaskBase
this.StateMachine = CS.StateMachine
this.LoadABTask = CS.LoadABTask
this.RuntimePlatform = CS.UnityEngine.RuntimePlatform
this.LocalGameCfgData = CS.LocalGameCfgData
this.LocalGameCfgData = CS.GameCfgMgr
this.Handheld = CS.UnityEngine.Handheld
this.DownAPKTask = CS.DownAPKTask
this.WXConstant = CS.WXConstant
this.DownAPKTask = CS.UnityEngine.TextAsset

function this.LuaTaskBase_class(base)
    return class(base,this.TaskBase)
end

function this.LuaUBBParser_Class(base)

    return class(base,this.LuaUBBParser)
end

function this.LuaStateBase_class(base)
    return class(base,this.LuaStateBase)
end

function this.wind_class(base)
    base = base or require("Core.WindowBase")
    return class(base,this.LuaWindow)
end

function this.LuaStateBase_class(base)
    local o = {}
    local base = base or this.LuaStateBase
    setmetatable(o, base)
    o.__index = o
    o.base = base

    --o.New = function(...)
    --    local t = {}
    --    setmetatable(t, o)
    --
    --    local ins = this.LuaStateBase.New()
    --    XLua.setpeer(ins, t)
    --    ins:ConnectLua(t)
    --    ins.EventDelegates = {}
    --    if t.ctor then
    --        t.ctor(ins, ...)
    --    end
    --
    --    return ins
    --end

    return o
end

function string.StartsWith(str, strs)
    local num = string.len(strs)
    if string.len(str) >= num then
        local subStr = string.sub(str, 1, num);
        return subStr == strs;
    else
        return false;
    end
end

function string.EndsWith(str, strs)
    local num = string.len(strs)
    --local allNum = string.len();

    if string.len(str) >= num then
        local subStr = string.sub(str, 1, num * -1);
        return subStr == strs;
    else
        return false;
    end
end
local fgui_internal = {}
--这里建立一个c# delegate到lua函数的映射，是为了支持self参数，和方便地进行remove操作
fgui_internal.EventDelegates = {}
setmetatable(fgui_internal.EventDelegates, {__mode = "k"})
function fgui_internal.GetDelegate(func, obj, createIfNone, delegateType)
    local mapping
    if obj~=nil then
        mapping = obj.EventDelegates
        if mapping==nil then
            mapping = {}
            setmetatable(mapping, {__mode = "k"})
            obj.EventDelegates = mapping
        end
    else
        mapping = fgui_internal.EventDelegates
    end

    local delegate = mapping[func]

    if createIfNone and delegate == nil then
        local realFunc
        if obj ~= nil then
            realFunc = function(context)
                return func(obj, context)
            end
        else
            realFunc = func
        end
        delegateType = delegateType or fgui.EventCallback1
        delegate = delegateType(realFunc)
        mapping[func] = delegate
    end

    return delegate
end
function this.Init()

    local EventListener_mt = getmetatable(this.EventDispatcherNode)
    local oldListenerAdd = rawget(EventListener_mt, 'AttachListener');

    local oldListenerRemove = rawget(EventListener_mt, 'DetachListener');

    local function ListenerAdd(listener, typeid, func, obj, priority, dispatchOnce)
        dispatchOnce = dispatchOnce or false;
        priority = priority or 0;
        typeid = typeid or "";
        local delegate = fgui_internal.GetDelegate(func, obj, true, this.EventListenerDele)
        oldListenerAdd(listener, typeid, delegate, priority, dispatchOnce);
    end

    local function ListenerRemove(listener, type, func, obj)
        local delegate = fgui_internal.GetDelegate(func, obj, false)
        if delegate ~= nil then
            oldListenerRemove(listener, type, delegate)
        end
    end

    rawset(EventListener_mt, 'AttachListener', ListenerAdd)
    rawset(EventListener_mt, 'DetachListener', ListenerRemove)
end

function this.DOTweenFloat( _start, _end, _duration, _update, _delay, _ease, _onComplete)
    local tween = this.TweenUtils.TweenFloat(_start, _end, _duration, _update)
    if _delay ~= nil then
        this.TweenUtils.SetDelay(tween, _delay)
    end
    if _ease ~= nil then
        this.TweenUtils.SetEase(tween, _ease)
    end
    if _onComplete ~= nil then
        this.TweenUtils.OnComplete(tween, _onComplete)
    end
end

function this.TweenVector2( _start, _end, _duration, _update, _delay, _ease, _onComplete)
    local tween = this.TweenUtils.TweenVector2(_start, _end, _duration, _update)
    if _delay ~= nil then
        this.TweenUtils.SetDelay(tween, _delay)
    end
    if _ease ~= nil then
        this.TweenUtils.SetEase(tween, _ease)
    end
    if _onComplete ~= nil then
        this.TweenUtils.OnComplete(tween, _onComplete)
    end
end

function this.TweenVector3( _start, _end, _duration, _update, _delay, _ease, _onComplete)
    local tween = this.TweenUtils.TweenVector3(_start, _end, _duration, _update)
    if _delay ~= nil then
        this.TweenUtils.SetDelay(tween, _delay)
    end
    if _ease ~= nil then
        this.TweenUtils.SetEase(tween, _ease)
    end
    if _onComplete ~= nil then
        this.TweenUtils.OnComplete(tween, _onComplete)
    end
end

function this.Scene_class(base)
    base = base or require("Core.SceneBaseLua")
    return class(base,this.LuaSceneBase)
end

return this
